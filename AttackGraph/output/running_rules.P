% MulVAL interaction rules for Linux with metric definitions
% Author : Xinming Ou, Su Zhang
% Copyright (C) 2011, Argus Cybersecurity Lab, Kansas State University

% This program is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program.  If not, see <http://www.gnu.org/licenses/>.
/******************************************************/
/****         Predicates Declaration              *****/
/******************************************************/

primitive(inCompetent(_principal)).
primitive(competent(_principal)).
primitive(clientProgram(_host, _programname)).
primitive(vuln_exists(_host, _cve, _prog, _rangeList, _losstype, _severity, _ac )).
primitive(vulExists(_host, _vulID, _program)).
primitive(vulProperty(_vulID, _range, _consequence)).
primitive(vulProperty(_vulID, _range, _consequence, _port, _prot)).
primitive(hacl(_src, _dst, _prot, _port)).
primitive(attackerLocated(_host)).
primitive(hasAccount(_principal, _host, _account)).
primitive(networkServiceInfo(_host, _program, _protocol, _port, _user)).
primitive(setuidProgramInfo(_host, _program, _owner)).
primitive(nfsExportInfo(_server, _path, _access, _client)).
primitive(nfsMounted(_client, _clientpath, _server, _serverpath, _access)).
primitive(localFileProtection(_host, _user, _access, _path)).
primitive(dependsOn(_h, _program, _library)).
primitive(installed(_h, _program)).
primitive(isWebServer(_host)).
primitive(isUserMachine(_host)).
primitive(vulExists(_machine,_vulID,_program,_range,_consequence)).
primitive(canAccessFile(_host, _user, _access, _path)).

/* Custom added primitives */
primitive(controlsFlow(_host, _flow)).
primitive(transportsFlow(_host, _flow)).


primitive(physicalLayer(_protocol, _host1, _host2)).
primitive(datalinkLayer(_protocol, _flow)).
primitive(applicationLayer(_protocol, _flow)).

primitive(weaknessPhysicalLayer(_sc, _protocol, _range)).

primitive(isGateway(_host)).
primitive(inSubnet(_host, _subnet)).
primitive(controlFlow(_source, _destination, _flow)).
primitive(protocol(_flow, _security)).
primitive(feedbackFlow(_source, _destination, _flow)).
primitive(l2Discovery(_host, _protocol)).
/* End of custom added primitives */

derived(execCode(_host, _user)).
derived(netAccess(_machine,_protocol,_port)).
derived(canAccessHost(_host)).
derived(accessFile(_machine,_access,_filepath)).
derived(principalCompromised(_victim)).
derived(logInService(_host, _protocol, _port)).
derived(accessMaliciousInput(_host, _principal, _program)).

/* Custom added derived predicates */
derived(canTamper(_flow)).
derived(canSpoof(_flow)).
derived(netVisibility(_host)).
derived(arpPoisoning(_host1, _host2)).

derived(wirelessCompromise(_host1)).

/* End of custom added primitives */

%meta(cvss(_vulID, _ac)).
primitive(cvss(_vulID)).
meta(attackGoal(_)).
meta(advances(_, _)).

/******************************************************/
/*             Tabling Predicates                     */
/*   All derived predicates should be tabled          */
/******************************************************/

:- table canTamper/1.
:- table canSpoof/1.
:- table execCode/2.
:- table netAccess/3.
:- table netVisibility/3.
:- table canAccessHost/1.
:- table canAccessFile/4.
:- table accessFile/3.
:- table principalCompromised/1.
:- table vulExists/5.
:- table logInService/3.
:- table arpPoisoning/2.

/******************************************************/
/****         Interaction Rules                   *****/
/******************************************************/

/* Section Threats */
/*
interaction_rule(
   (canTamper(Flow) :-
	  execCode(H, root),
    controlsFlow(H, Flow)),
   rule_desc('Controller compromised', 'certain')).

interaction_rule(
    (canTamper(Flow) :-
   	 execCode(H, root),
     transportsFlow(H, Flow)),
    rule_desc('Flow compromised', 'certain')).

interaction_rule(
    (canSpoof(Flow) :-
   	 netAccess(H, Protocol, Port),
     transportsFlow(H, Flow)),
    rule_desc('Access transport network', 'certain')).
*/

interaction_rule(
   (wirelessCompromise(Host) :-
    attackerLocated(coverZone),
	  physicalLayer(Protocol, Host, _),
    weaknessPhysicalLayer(ac7, Protocol, coverZone)),
   rule_desc('Wireless Compromised', 'certain')).

interaction_rule(
    (canSpoof(Flow) :-
   	 wirelessCompromise(Host),
     controlFlow(_, Host, Flow)),
    rule_desc('Flow Spoofed', 'certain')).

interaction_rule(
   (canTamper(Flow) :-
	  execCode(H, root),
    controlFlow(H, _,Flow)),
   rule_desc('Controller compromised', 'certain')).

interaction_rule(
   (canTamper(Flow) :-
	  execCode(H, root),
    controlFlow(_, H,Flow)),
   rule_desc('Controller compromised', 'certain')).

interaction_rule(
    (canTamper(Flow) :-
   	 execCode(H, root),
     transportsFlow(H, Flow)),
    rule_desc('Flow compromised', 'certain')).


interaction_rule(
    (canSpoof(Flow) :-
   	 execCode(H, root),
     transportsFlow(H, Flow)),
    rule_desc('Access transport network', 'certain')).

interaction_rule(
    (canSpoof(Flow) :-
   	 arpPoisoning(H, K),
     isGateway(K),
     protocol(Flow, plaintext),
     controlFlow(H, _, Flow)),
    rule_desc('Access transport network', 'certain')).

interaction_rule(
    (canSpoof(Flow) :-
   	 arpPoisoning(H, K),
     protocol(Flow, plaintext),
     controlFlow(H, K, Flow)),
    rule_desc('Access transport network', 'certain')).


/****** Section execCode *******/

/*
interaction_rule(
   (execCode(H, Perm) :-
	hasAccount(P, H, Perm)),
   rule_desc('Insider threat', 'possible')).
*/

interaction_rule(
   (execCode(Host, Perm) :-
	principalCompromised(Victim),
	hasAccount(Victim, Host, Perm),
	canAccessHost(Host)),
   rule_desc('Reuse of credentials',
             'likely')).

interaction_rule(
  (execCode(Host, root) :-
	execCode(Host, _Perm2),
	vulExists(Host, VulID, Software, localExploit, privEscalation),
	cvss(VulID)),
  rule_desc('local exploit',
            'likely')).

interaction_rule(
  (execCode(H, Perm) :-
	vulExists(H, VulID, Software, remoteExploit, privEscalation),
        cvss(VulID),
	networkServiceInfo(H, Software, Protocol, Port, Perm),
	netAccess(H, Protocol, Port)),
  rule_desc('remote exploit of a server program',
            'likely')).

interaction_rule(
  (execCode(H, Perm) :-
        vulExists(H, VulID, Software, remoteClient, privEscalation),
	cvss(VulID),
	hasAccount(Victim, H, Perm),
        accessMaliciousInput(H, Victim, Software)),
  rule_desc('remote exploit of a client program',
            'likely')).

interaction_rule(
  (execCode(H, root) :-
	accessFile(H, write, _Path)),
  rule_desc('Trojan horse installation',
            'possible')).

/* Singleton variable at head
interaction_rule(
 (execCode( Attacker, Host, _) :-
   execCode(Attacker, Host, root)),
  'execution at any level if root execution').
*/

interaction_rule(
  (netVisibility(H) :-
	execCode(H1, _Perm),  
	advances(H1, H2),
        hacl(H1, H2, _, _)),
  rule_desc('multi-hop access',
            'certain')).

/*
interaction_rule(
  (netVisibility(H) :-
	attackerLocated(Zone),
  inSubnet(H, Zone)),
  rule_desc('visibility on-host access',
            'certain')).
*/

interaction_rule(
  (netVisibility(H) :-
  attackerLocated(Zone),
	hacl(Zone, H, _, _)),
  rule_desc('direct network access',
            'certain')).

interaction_rule(
   (arpPoisoning(Host1, Host2) :-
    netVisibility(Host1),
    netVisibility(Host2),
    inSubnet(Host1, Subnet),
    inSubnet(Host2, Subnet)),
   rule_desc('ARP Poisoning', 'likely')).
/*
interaction_rule(
   (canSpoof(Flow) :-
    %arpPoisoning(H, K),
    controlFlow(H, _, Flow)),
   rule_desc('Traffic spoofed', 'certain')).


Questa non mi serve
interaction_rule(
  (netVisibility(H, Protocol, Port) :-
	attackerLocated(H)),
  rule_desc('direct on-host access',
            'certain')).
*/

/******** Section netAccess ********/
/* accessing a host through network according to a hacl policy.
   For now we assume that every user on a local
   machine has access to network. this may change
   later. */
interaction_rule(
  (netAccess(H2, Protocol, Port) :-
	execCode(H1, _Perm),  /* Any permission level */
	advances(H1, H2),
        hacl(H1, H2, Protocol, Port)),
  rule_desc('multi-hop access',
            'certain')).

interaction_rule(
  (netAccess(H, Protocol, Port) :-
	attackerLocated(Zone),
	hacl(Zone, H, Protocol, Port)),
  rule_desc('direct network access',
            'certain')).

interaction_rule(
  (netAccess(H, Protocol, Port) :-
	attackerLocated(H)),
  rule_desc('direct on-host access',
            'certain')).


/****** Section canAccessHost ******/
interaction_rule(
  (canAccessHost(H) :-
	execCode(H, _Perm)),
  rule_desc('Access a host through executing code on the machine',
            'certain')).

interaction_rule(
  (canAccessHost(H) :-
	logInService(H, Protocol, Port),
	netAccess(H, Protocol, Port)),
  rule_desc('Access a host through a log-in service',
            'certain')).

/******** Section accessFile ********/
interaction_rule(
  (accessFile(H, Access, Path) :-
	execCode(H, Usr),
	canAccessFile(H, Usr, Access, Path)),
  rule_desc('execCode implies file access',
            'certain')).


/****** Section principalCompromised ******/
interaction_rule(
  (principalCompromised(Victim) :-
	hasAccount(Victim, H, _Perm),
	execCode(H, root)),
  rule_desc('password sniffing',
            'likely')).

interaction_rule(
  (principalCompromised(Victim) :-
	inCompetent(Victim),
  attackerLocated(_)),
  rule_desc('target incompetent user', 'possible')).



/********************************************************/
/*      Software specific knowledge                     */
/********************************************************/

/***************** Section ssh **********************/
interaction_rule(
  (logInService(H, Protocol, Port) :-
	networkServiceInfo(H, sshd, Protocol, Port, _)),
  rule_desc('SSH is a login service', 'certain')).

interaction_rule(
  (logInService(H, Protocol, Port) :-
	networkServiceInfo(H, vpnService, Protocol, Port, _)),
  rule_desc('VPN is a login service', 'certain')).

interaction_rule(
  (logInService(H, Protocol, Port) :-
  networkServiceInfo(H, rdpd, Protocol, Port, _)),
  rule_desc('RDP is a login service', 'certain')).

/**************** Section  nfs *****************/
/* Principal P can access files on a NFS server if the files
   on the server are mounted at a client and he can access the
   files on the client side */
interaction_rule(
  (accessFile(Server, Access, ServerPath) :-
	nfsMounted(Client, ClientPath, Server, ServerPath, Access),
	accessFile(Client, Access, ClientPath)),
  rule_desc('NFS semantics', 'certain')).


/* Principal P can access files on a NFS client if the files
   on the server are mounted at the client and he can access the
   files on the server side */
interaction_rule(
  (accessFile(Client, Access, ClientPath) :-
	nfsMounted(Client, ClientPath, Server, ServerPath, read),
	accessFile(Server, Access, ServerPath)),
  rule_desc('NFS semantics', 'certain')).


interaction_rule(
  (accessFile(Server, Access, Path) :-
	execCode(Client, _User),
    	nfsExportInfo(Server, Path, Access, Client),
    	hacl(Client, Server, nfsProtocol, nfsPort)),
  rule_desc('NFS shell', 'likely')).


interaction_rule(
  (canAccessFile(H, Usr, Acc, Path) :-
	localFileProtection(H, Usr, Acc, Path)),
  rule_desc('file system access control', 'certain')).


interaction_rule((vulExists(H, ID, Sw, Range, Consequence):-
	        vulExists(H, ID, Sw),
		vulProperty(ID, Range, Consequence)),
             rule_desc('', 'certain')).

interaction_rule((vulExists(H, ID, Sw, Range, Consequence):-
	        vulExists(H, ID, Library, Range, Consequence),
		dependsOn(H, Sw, Library)),
             rule_desc('Library bug', 'certain')).

interaction_rule(
   (accessMaliciousInput(H, Victim, Software) :-
     inCompetent(Victim),
     hacl(H, MaliciousMachine, httpProtocol, httpPort),
     attackerLocated(MaliciousMachine)),
  rule_desc('Browsing a malicious website', 'likely')).

interaction_rule(
   (accessMaliciousInput(H, Victim, Software) :-
     competent(Victim),
     hacl(H, MaliciousMachine, httpProtocol, httpPort),
     attackerLocated(MaliciousMachine)),
  rule_desc('Browsing a malicious website', 'unlikely')).

interaction_rule(
   (accessMaliciousInput(H, Victim, Software) :-
     inCompetent(Victim),
     isWebServer(CompromisedMachine),
     hacl(H, CompromisedMachine, httpProtocol, httpPort),
     execCode(CompromisedMachine, _)),
  rule_desc('Browsing a compromised website', 'possible')).

/*
interaction_rule(
   (canAccessMaliciousInput(H, Victim, EmailClientSoftware) :-
     inCompetent(Victim),
     isEmailClient(EmailClientSoftware),
     isEmailServer(EmailServerSoftware),
     isUserMachine(H),
     hacl(H, EmailServer, EmailProtocol, EmailPort),
     networkServiceInfo(EmailServer, EmailServerSoftware,
                                EmailProtocol, EmailPort, _Perm)),
   rule_desc('receive an email message', 'possible')).
*/
